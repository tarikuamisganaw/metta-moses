; a function to get the guardset of an n-ary expression as a tuple. 
(= (getGuardSetExp $expOriginal $expRecursive $acc)
    (if (== (get-metatype $expOriginal) Symbol) ($expOriginal) ;if $exp is LITERAL, the guardSet is the set containing the literal itself
    (if (== $expRecursive ()) $acc
        (let*
            (
                ($head (car-atom $expRecursive))
                ($headIsExpression (== (get-metatype $head) Expression))
                ($tail (cdr-atom $expRecursive))
                ($tailIsExpression (== (get-metatype $tail) Expression))
            )
            (if (== $head NOT) 
             (case $expOriginal
                 (
                     ((NOT $b) (if (== (get-metatype $b) Symbol) $expOriginal ())) ;If the head of the expression is NOT, $b should only be a literal for it to have a guardSet of (NOT $b). If $b is an expression, the guardSet is ()
                 )
             )
             (if (== $head OR) ()  ;an OR expression doesn't have a guardSet
                 (if (== $head AND) ; an AND expression has a guardSet which contains its literal and (NOT $literal) children
                     (getGuardSetExp $expOriginal $tail $acc)
                     (if $headIsExpression
                         (case $head
                             (
                                 ( (NOT $a) (getGuardSetExp $expOriginal $tail (cons-atom $head $acc)))
                                 ($else (getGuardSetExp $expOriginal $tail $acc))
                             )
                         )
                         (getGuardSetExp $expOriginal $tail (cons-atom $head $acc))
                     )
                 )
             )
            )
        )
    ) 
    )
)

;function to check consistency of  an expression
(= (isConsistentExp $exp)
   (let $guardSetTuple (getGuardSetExp $exp $exp ())
      (if (== $guardSetTuple ()) True
          (check-negations (collapse ((superpose $guardSetTuple) (superpose $guardSetTuple))))
             )))

;function to check negation pairs to check each pair in a list of a tuple
(= (negation-pair $a $b)
   (or (== $a (NOT $b)) (== $b (NOT $a))))

;function  to recurse through the list of the tuple to check each pair
(= (check-negations $pairList)
   (if (== $pairList ()) 
       True
       (let* (
        ($pair (car-atom $pairList))     
        ($first (car-atom $pair))        
        ($second (cdr-atom $pair))  
        ($realsecond (car-atom $second))          
        ($pairtail (cdr-atom $pairList))) 
          (if (negation-pair $first $realsecond)
              False                      
              (check-negations $pairtail)))))  






;a helper function to the zeroConstraintSubsume function
;a function which checks if an Expression (a representation of a node) has a child or not
(= (nodeHasChildExp $node)
(let*
(
    ($head (car-atom $node))
    ($tail (cdr-atom $node))
    ($nodeType (get-metatype $node))
)
(if (== $nodeType Symbol) 
 False 
 (if (== $tail ()) 
     False 
     True
 )
)
)
)

;a function that will return Gardset(literals for OR) and the children as a tuple ((Gset), (Children))
(= (GsetandChildren $expr $literals $nonLiterals)
    (if (== $expr ())
        ($literals $nonLiterals)
        (let* 
            (   
                ($head (car-atom $expr))
                ($tail (cdr-atom $expr))
                ($isLiteral (or (== (get-metatype $head) Symbol) (unify $head (NOT $_) True False)))
            )
            (if (or (== $head AND) (== $head OR)) 
                (GsetandChildren $tail $literals $nonLiterals)

                (if $isLiteral 
                    (GsetandChildren $tail (concatTuple $literals ($head)) $nonLiterals)
                    (GsetandChildren $tail $literals (concatTuple $nonLiterals ($head)))        
                )
            )
        )
    )
)

(= (getGsetAndChildren $expr) (GsetandChildren $expr () ()))

; Function to find common literals between a tuple and a nested tuple
(= (findCommonLiterals $tuple $nestedTuple)
    (if (or (== $nestedTuple ()) (== $tuple ()))
        ()
        (let* 
            (
                ($first (car-atom $nestedTuple))
                ($tail (cdr-atom $nestedTuple))
                ($common (collapse (intersection (superpose $tuple) (superpose $first))))
            )
            (if (== $tail ())
                $common
                (findCommonLiterals $common $tail)
            )
        )
    )
)

; Function to find common literals in a nested tuple
(= (findCommon $nestedTuple)
    (if (or (== $nestedTuple ()) (== (cdr-atom $nestedTuple) ()))
        ()
        (let* (
            ($first (car-atom $nestedTuple))
            ($tail (cdr-atom $nestedTuple))
        )
        (findCommonLiterals $first $tail)
        )
    )
)
;function to find returin the Gardset of an expression
(= (getGuardSet $expr $acc)
    (if (== $expr ())
        $acc
        (let* 
            (
                ($head (car-atom $expr))
                ($tail (cdr-atom $expr))
                ($isLiteral (or (== (get-metatype $head) Symbol) (unify $head (NOT $_) True False)))
            )
            (if (or (== $head AND) (== $head OR)) 
                (getGuardSet $tail $acc)
                (if $isLiteral 
                    (getGuardSet $tail (concatTuple $acc ($head)))
                    (getGuardSet $tail $acc)
                )
            )
        )
    )
)

